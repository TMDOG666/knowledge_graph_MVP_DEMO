[
    {
        "human": "我要学习变量与数据类型",
        "ai": "**变量与数据类型学习指南**  \n\n**1. 变量定义**  \n- Python变量无需声明类型，通过赋值自动推断：  \n  ```python  \n  x = 5           # int类型  \n  y = 3.14        # float类型  \n  name = \"Alice\"  # str类型  \n  is_valid = True # bool类型  \n  ```  \n- **命名规则**：区分大小写（`age ≠ Age`），允许字母/数字/下划线（`user_name1`），禁止以数字开头（`1user`非法）。  \n\n**2. 核心数据类型**  \n- **整数（int）**：支持任意精度（如`1_000_000_000`），位运算示例：  \n  ```python  \n  a = 0b1010  # 二进制  \n  b = 0o12    # 八进制  \n  c = 0xA     # 十六进制  \n  print(a & b)  # 按位与运算  \n  ```  \n- **浮点数（float）**：遵循IEEE 754标准，注意精度问题：  \n  ```python  \n  print(0.1 + 0.2)  # 输出 0.30000000000000004  \n  ```  \n- **字符串（str）**：不可变序列，支持三引号多行字符串和f-string格式化：  \n  ```python  \n  s = f\"Name: {name}, Age: {x}\"  # f-string  \n  print(len(s))                  # 字符串长度  \n  ```  \n- **布尔（bool）**：`True`/`False`，逻辑运算优先级低于比较运算：  \n  ```python  \n  result = (5 > 3) and (x == 5)  # 比较运算优先于and/or  \n  ```  \n\n**3. 类型检查与转换**  \n- 使用`type()`查看类型，`isinstance()`判断继承关系：  \n  ```python  \n  print(type(y))         # <class 'float'>  \n  print(isinstance(x, int))  # True  \n  ```  \n- 显式转换：  \n  ```python  \n  num = int(\"42\")       # str → int  \n  text = str(3.14)      # float → str  \n  ```  \n\n**4. 实践任务**  \n- **练习1**：编写代码接收用户输入，判断输入是否为整数：  \n  ```python  \n  user_input = input(\"请输入一个数字: \")  \n  if user_input.isdigit():  \n      print(f\"这是整数: {int(user_input)}\")  \n  else:  \n      print(f\"这是字符串: {user_input}\")  \n  ```  \n- **练习2**：用`type()`实现类型安全的加法函数：  \n  ```python  \n  def safe_add(a, b):  \n      if type(a) == type(b):  \n          return a + b  \n      else:  \n          raise TypeError(\"类型不匹配\")  \n  ```  \n\n**5. 常见误区**  \n- 动态类型可能导致意外行为：  \n  ```python  \n  x = \"123\"  \n  print(x * 3)  # 字符串重复 → \"123123123\"  \n  x = 123  \n  print(x * 3)  # 数值乘法 → 369  \n  ```  \n- **建议**：用`pylint`检查变量命名规范（如避免单字母变量名）。  \n\n**下一步**：完成练习后，尝试用`input()`和`print()`实现一个交互式BMI计算器（提示：需用`float()`转换输入）。"
    }
]